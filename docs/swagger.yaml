basePath: /
definitions:
  abstraction.PaginationInfo:
    properties:
      count:
        type: integer
      more_records:
        type: boolean
      page:
        type: integer
      page_size:
        type: integer
      total_page:
        type: integer
    type: object
  dto.AuthLoginResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      role_id:
        description: fk
        type: string
      token:
        type: string
    type: object
  dto.AuthLoginResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.AuthLoginResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.BrandResponse:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      supplier:
        $ref: '#/definitions/entity.UserModel'
      supplier_id:
        description: fk
        type: string
      variants:
        description: relations
        items:
          $ref: '#/definitions/entity.VariantModel'
        type: array
    type: object
  dto.BrandResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.BrandResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.ConvertCurrencyRequest:
    properties:
      usd:
        type: integer
    type: object
  dto.ConvertCurrencyResponse:
    properties:
      idr:
        type: integer
    type: object
  dto.ConvertCurrencyResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.ConvertCurrencyResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.ConvertionUnitResponse:
    properties:
      Destination:
        type: string
      id:
        type: string
      origin:
        type: string
      total:
        type: number
    type: object
  dto.ConvertionUnitResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.ConvertionUnitResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.CreateBrandRequest:
    properties:
      name:
        type: string
      supplier_id:
        type: string
    required:
    - name
    type: object
  dto.CreateConvertionUnitRequest:
    properties:
      destination:
        type: string
      origin:
        type: string
      total:
        type: number
    required:
    - destination
    - origin
    - total
    type: object
  dto.CreateCurrencyRequest:
    properties:
      is_auto:
        type: boolean
      name:
        type: string
      value:
        type: number
    required:
    - name
    type: object
  dto.CreatePacketRequest:
    properties:
      unit_id:
        type: string
      value:
        type: integer
    required:
    - unit_id
    - value
    type: object
  dto.CreateProductLookupRequest:
    properties:
      is_seal:
        type: boolean
      product_id:
        type: string
      remaining_type_value:
        type: number
      remaining_type_value_before:
        type: number
      type_value:
        type: number
    required:
    - product_id
    type: object
  dto.CreateProductRequest:
    properties:
      brand_id:
        type: string
      name:
        type: string
      packet_id:
        type: string
      price_final:
        type: number
      price_usd:
        type: number
      variant_id:
        type: string
    required:
    - brand_id
    - packet_id
    - variant_id
    type: object
  dto.CreateReminderStockRequest:
    properties:
      min_stock:
        type: integer
      name:
        type: string
    type: object
  dto.CreateRoleRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.CreateUnitRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        example: user@gmail.com
        type: string
      name:
        example: user
        type: string
      password:
        type: string
      phone_number:
        type: string
      role_id:
        example: "1"
        type: string
      role_name:
        type: string
    required:
    - name
    type: object
  dto.CreateVariantRequest:
    properties:
      brand_id:
        type: string
      itl:
        type: string
      name:
        type: string
      unique_code:
        type: string
    required:
    - brand_id
    - name
    type: object
  dto.CurrencyResponse:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      is_auto:
        type: boolean
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      value:
        type: number
    type: object
  dto.CurrencyResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.CurrencyResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.LoginAuthRequest:
    properties:
      email:
        example: admin@gmail.com
        type: string
      password:
        example: admin
        type: string
    required:
    - email
    - password
    type: object
  dto.PacketResponse:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      unit:
        $ref: '#/definitions/entity.UnitModel'
        description: relations
      unit_id:
        description: fk
        type: string
      value:
        type: integer
    type: object
  dto.PacketResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.PacketResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.ProductLookupResponse:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      is_seal:
        type: boolean
      modified_at:
        type: string
      modified_by:
        type: string
      product_id:
        description: fk
        type: string
      remaining_type_value:
        type: number
      remaining_type_value_before:
        type: number
      type_value:
        type: number
    type: object
  dto.ProductLookupResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.ProductLookupResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.ProductResponse:
    properties:
      brand:
        $ref: '#/definitions/entity.BrandModel'
        description: relations
      brand_id:
        description: fk
        type: string
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      packet_id:
        type: string
      price_final:
        type: number
      price_usd:
        type: number
      product_lookups:
        items:
          $ref: '#/definitions/entity.ProductLookupModel'
        type: array
      type:
        $ref: '#/definitions/entity.PacketModel'
      variant:
        $ref: '#/definitions/entity.VariantModel'
      variant_id:
        type: string
    type: object
  dto.ProductResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.ProductResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.RegisterAuthRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role_id:
        description: fk
        type: string
    type: object
  dto.ReminderStockResponse:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      min_stock:
        type: integer
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  dto.ReminderStockResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.ReminderStockResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.RoleResponse:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  dto.RoleResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.RoleResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.UnitResponse:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  dto.UnitResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.UnitResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.UpdateBrandRequest:
    properties:
      id:
        type: string
      name:
        type: string
      supplier_id:
        type: string
    required:
    - id
    type: object
  dto.UpdateConvertionUnitRequest:
    properties:
      destination:
        type: string
      id:
        type: string
      origin:
        type: string
      total:
        type: number
    required:
    - id
    type: object
  dto.UpdateCurrencyRequest:
    properties:
      id:
        type: string
      is_auto:
        type: boolean
      name:
        type: string
      value:
        type: number
    required:
    - id
    type: object
  dto.UpdatePacketRequest:
    properties:
      id:
        type: string
      unit_id:
        type: string
      value:
        type: integer
    required:
    - id
    type: object
  dto.UpdateProductLookupRequest:
    properties:
      id:
        type: string
      is_seal:
        type: boolean
      remaining_type_value:
        type: number
      remaining_type_value_before:
        type: number
      type_value:
        type: number
    required:
    - id
    type: object
  dto.UpdateProductRequest:
    properties:
      id:
        type: string
      name:
        type: string
      price_final:
        type: number
      price_usd:
        type: number
    required:
    - id
    type: object
  dto.UpdateReminderStockRequest:
    properties:
      id:
        type: string
      min_stock:
        type: integer
      name:
        type: string
    required:
    - id
    type: object
  dto.UpdateRoleRequest:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - id
    type: object
  dto.UpdateUnitRequest:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - id
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    required:
    - id
    type: object
  dto.UpdateVariantRequest:
    properties:
      id:
        type: string
      itl:
        type: string
      name:
        type: string
      unique_code:
        type: string
    required:
    - id
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/entity.RoleModel'
      role_id:
        description: fk
        type: string
      user_profile:
        $ref: '#/definitions/entity.UserProfileModel'
    type: object
  dto.UserResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.UserResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.VariantResponse:
    properties:
      brand:
        $ref: '#/definitions/entity.BrandModel'
        description: relations
      brand_id:
        description: fk
        type: string
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      itl:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      unique_code:
        type: string
    type: object
  dto.VariantResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.VariantResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  entity.BrandModel:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      supplier:
        $ref: '#/definitions/entity.UserModel'
      supplier_id:
        description: fk
        type: string
      variants:
        description: relations
        items:
          $ref: '#/definitions/entity.VariantModel'
        type: array
    type: object
  entity.PacketModel:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      unit:
        $ref: '#/definitions/entity.UnitModel'
        description: relations
      unit_id:
        description: fk
        type: string
      value:
        type: integer
    type: object
  entity.ProductLookupModel:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      is_seal:
        type: boolean
      modified_at:
        type: string
      modified_by:
        type: string
      product_id:
        description: fk
        type: string
      remaining_type_value:
        type: number
      remaining_type_value_before:
        type: number
      type_value:
        type: number
    type: object
  entity.RoleModel:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  entity.UnitModel:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  entity.UserModel:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      password:
        type: string
      role_id:
        description: fk
        type: string
    type: object
  entity.UserProfileModel:
    properties:
      address:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      phone:
        type: string
      user_id:
        description: fk
        type: string
    type: object
  entity.VariantModel:
    properties:
      brand:
        $ref: '#/definitions/entity.BrandModel'
        description: relations
      brand_id:
        description: fk
        type: string
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      itl:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
      unique_code:
        type: string
    type: object
  response.Meta:
    properties:
      code:
        type: string
      info:
        $ref: '#/definitions/abstraction.PaginationInfo'
      message:
        default: "true"
        type: string
      success:
        default: true
        type: boolean
    type: object
  response.errorResponse:
    properties:
      error:
        type: string
      meta:
        $ref: '#/definitions/response.Meta'
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a doc for stoqu-be.
  title: stoqu-be
  version: 0.0.1
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthLoginResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Login user
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthLoginResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Register user
      tags:
      - auth
  /api/brands:
    get:
      consumes:
      - application/json
      description: Get brand
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: search
        type: string
      - example:
        - asc_column
        - -dsc_column
        in: query
        items:
          type: string
        name: sort_by
        type: array
      - in: query
        name: code
        type: string
      - in: query
        name: name
        type: string
      - description: fk
        in: query
        name: supplier_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BrandResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get brand
      tags:
      - brand
    post:
      consumes:
      - application/json
      description: Create brand
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBrandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BrandResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Create brand
      tags:
      - brand
  /api/brands/{id}:
    delete:
      consumes:
      - application/json
      description: Delete brand
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BrandResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete brand
      tags:
      - brand
    get:
      consumes:
      - application/json
      description: Get brand by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BrandResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get brand by id
      tags:
      - brand
    put:
      consumes:
      - application/json
      description: Update brand
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBrandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BrandResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Update brand
      tags:
      - brand
  /api/convertion-units:
    get:
      consumes:
      - application/json
      description: Get convertionUnit
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: search
        type: string
      - example:
        - asc_column
        - -dsc_column
        in: query
        items:
          type: string
        name: sort_by
        type: array
      - in: query
        name: code
        type: string
      - in: query
        name: name
        type: string
      - in: query
        name: unit_destination_id
        type: string
      - description: fk
        in: query
        name: unit_origin_id
        type: string
      - in: query
        name: value_convertion
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ConvertionUnitResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get convertionUnit
      tags:
      - convertionUnit
    post:
      consumes:
      - application/json
      description: Create convertionUnit
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateConvertionUnitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ConvertionUnitResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Create convertionUnit
      tags:
      - convertionUnit
  /api/convertion-units/{id}:
    delete:
      consumes:
      - application/json
      description: Delete convertionUnit
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ConvertionUnitResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete convertionUnit
      tags:
      - convertionUnit
    get:
      consumes:
      - application/json
      description: Get convertionUnit by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ConvertionUnitResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get convertionUnit by id
      tags:
      - convertionUnit
    put:
      consumes:
      - application/json
      description: Update convertionUnit
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateConvertionUnitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ConvertionUnitResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Update convertionUnit
      tags:
      - convertionUnit
  /api/currencies:
    get:
      consumes:
      - application/json
      description: Get currency
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: search
        type: string
      - example:
        - asc_column
        - -dsc_column
        in: query
        items:
          type: string
        name: sort_by
        type: array
      - in: query
        name: code
        type: string
      - in: query
        name: is_auto
        type: boolean
      - in: query
        name: name
        type: string
      - in: query
        name: value
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CurrencyResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get currency
      tags:
      - currency
    post:
      consumes:
      - application/json
      description: Create currency
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCurrencyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CurrencyResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Create currency
      tags:
      - currency
  /api/currencies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete currency
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CurrencyResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete currency
      tags:
      - currency
    get:
      consumes:
      - application/json
      description: Get currency by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CurrencyResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get currency by id
      tags:
      - currency
    put:
      consumes:
      - application/json
      description: Update currency
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCurrencyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CurrencyResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Update currency
      tags:
      - currency
  /api/currencies/convert:
    post:
      consumes:
      - application/json
      description: Convert currency
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ConvertCurrencyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ConvertCurrencyResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Convert currency
      tags:
      - currency
  /api/packets:
    get:
      consumes:
      - application/json
      description: Get packet
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: search
        type: string
      - example:
        - asc_column
        - -dsc_column
        in: query
        items:
          type: string
        name: sort_by
        type: array
      - in: query
        name: code
        type: string
      - in: query
        name: name
        type: string
      - description: fk
        in: query
        name: unit_id
        type: string
      - in: query
        name: value
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PacketResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get packet
      tags:
      - packet
    post:
      consumes:
      - application/json
      description: Create packet
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePacketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PacketResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Create packet
      tags:
      - packet
  /api/packets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete packet
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PacketResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete packet
      tags:
      - packet
    get:
      consumes:
      - application/json
      description: Get packet by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PacketResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get packet by id
      tags:
      - packet
    put:
      consumes:
      - application/json
      description: Update packet
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePacketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PacketResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Update packet
      tags:
      - packet
  /api/product-lookups:
    get:
      consumes:
      - application/json
      description: Get productLookup
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: search
        type: string
      - example:
        - asc_column
        - -dsc_column
        in: query
        items:
          type: string
        name: sort_by
        type: array
      - in: query
        name: code
        type: string
      - in: query
        name: is_seal
        type: boolean
      - description: fk
        in: query
        name: product_id
        type: string
      - in: query
        name: remaining_type_value
        type: number
      - in: query
        name: remaining_type_value_before
        type: number
      - in: query
        name: type_value
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductLookupResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get productLookup
      tags:
      - productLookup
    post:
      consumes:
      - application/json
      description: Create productLookup
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductLookupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductLookupResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Create productLookup
      tags:
      - productLookup
  /api/product-lookups/{id}:
    delete:
      consumes:
      - application/json
      description: Delete productLookup
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductLookupResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete productLookup
      tags:
      - productLookup
    get:
      consumes:
      - application/json
      description: Get productLookup by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductLookupResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get productLookup by id
      tags:
      - productLookup
    put:
      consumes:
      - application/json
      description: Update productLookup
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductLookupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductLookupResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Update productLookup
      tags:
      - productLookup
  /api/products:
    get:
      consumes:
      - application/json
      description: Get product
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: search
        type: string
      - example:
        - asc_column
        - -dsc_column
        in: query
        items:
          type: string
        name: sort_by
        type: array
      - description: fk
        in: query
        name: brand_id
        type: string
      - description: join
        in: query
        name: brand_name
        type: string
      - in: query
        name: code
        type: string
      - in: query
        name: created_at
        type: string
      - in: query
        name: created_by
        type: string
      - in: query
        name: id
        type: string
      - in: query
        name: modified_at
        type: string
      - in: query
        name: modified_by
        type: string
      - in: query
        name: name
        type: string
      - in: query
        name: packet_id
        type: string
      - in: query
        name: packet_value
        type: integer
      - in: query
        name: price_final
        type: number
      - in: query
        name: price_usd
        type: number
      - in: query
        name: supplier_name
        type: string
      - in: query
        name: unit_name
        type: string
      - in: query
        name: variant_id
        type: string
      - in: query
        name: variant_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get product
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Create product
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Create product
      tags:
      - product
  /api/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete product
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - product
    get:
      consumes:
      - application/json
      description: Get product by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get product by id
      tags:
      - product
    put:
      consumes:
      - application/json
      description: Update product
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - product
  /api/reminder-stocks:
    post:
      consumes:
      - application/json
      description: Create reminderStock
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateReminderStockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReminderStockResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Create reminderStock
      tags:
      - reminderStock
  /api/reminder-stocks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete reminderStock
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReminderStockResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete reminderStock
      tags:
      - reminderStock
    get:
      consumes:
      - application/json
      description: Get reminderStock by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReminderStockResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get reminderStock by id
      tags:
      - reminderStock
    put:
      consumes:
      - application/json
      description: Update reminderStock
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateReminderStockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReminderStockResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Update reminderStock
      tags:
      - reminderStock
  /api/reminder_stocks:
    get:
      consumes:
      - application/json
      description: Get reminderStock
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: search
        type: string
      - example:
        - asc_column
        - -dsc_column
        in: query
        items:
          type: string
        name: sort_by
        type: array
      - in: query
        name: code
        type: string
      - in: query
        name: min_stock
        type: integer
      - in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReminderStockResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get reminderStock
      tags:
      - reminderStock
  /api/roles:
    get:
      consumes:
      - application/json
      description: Get role
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: search
        type: string
      - example:
        - asc_column
        - -dsc_column
        in: query
        items:
          type: string
        name: sort_by
        type: array
      - in: query
        name: code
        type: string
      - in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RoleResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get role
      tags:
      - role
    post:
      consumes:
      - application/json
      description: Create role
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RoleResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Create role
      tags:
      - role
  /api/roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete role
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RoleResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - role
    get:
      consumes:
      - application/json
      description: Get role by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RoleResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get role by id
      tags:
      - role
    put:
      consumes:
      - application/json
      description: Update role
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RoleResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Update role
      tags:
      - role
  /api/units:
    get:
      consumes:
      - application/json
      description: Get unit
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: search
        type: string
      - example:
        - asc_column
        - -dsc_column
        in: query
        items:
          type: string
        name: sort_by
        type: array
      - in: query
        name: code
        type: string
      - in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UnitResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get unit
      tags:
      - unit
    post:
      consumes:
      - application/json
      description: Create unit
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUnitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UnitResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Create unit
      tags:
      - unit
  /api/units/{id}:
    delete:
      consumes:
      - application/json
      description: Delete unit
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UnitResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete unit
      tags:
      - unit
    get:
      consumes:
      - application/json
      description: Get unit by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UnitResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get unit by id
      tags:
      - unit
    put:
      consumes:
      - application/json
      description: Update unit
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUnitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UnitResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Update unit
      tags:
      - unit
  /api/users:
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: search
        type: string
      - example:
        - asc_column
        - -dsc_column
        in: query
        items:
          type: string
        name: sort_by
        type: array
      - in: query
        name: email
        type: string
      - in: query
        name: name
        type: string
      - in: query
        name: password
        type: string
      - description: fk
        in: query
        name: role_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - user
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get user by id
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - user
  /api/variants:
    get:
      consumes:
      - application/json
      description: Get variant
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: search
        type: string
      - example:
        - asc_column
        - -dsc_column
        in: query
        items:
          type: string
        name: sort_by
        type: array
      - description: fk
        in: query
        name: brand_id
        type: string
      - in: query
        name: code
        type: string
      - in: query
        name: itl
        type: string
      - in: query
        name: name
        type: string
      - in: query
        name: unique_code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VariantResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get variant
      tags:
      - variant
    post:
      consumes:
      - application/json
      description: Create variant
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateVariantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VariantResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Create variant
      tags:
      - variant
  /api/variants/{id}:
    delete:
      consumes:
      - application/json
      description: Delete variant
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VariantResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete variant
      tags:
      - variant
    get:
      consumes:
      - application/json
      description: Get variant by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VariantResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Get variant by id
      tags:
      - variant
    put:
      consumes:
      - application/json
      description: Update variant
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateVariantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VariantResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      security:
      - BearerAuth: []
      summary: Update variant
      tags:
      - variant
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
