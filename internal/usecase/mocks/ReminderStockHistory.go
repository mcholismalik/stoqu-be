// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	abstraction "gitlab.com/stoqu/stoqu-be/internal/model/abstraction"

	dto "gitlab.com/stoqu/stoqu-be/internal/model/dto"

	mock "github.com/stretchr/testify/mock"
)

// ReminderStockHistory is an autogenerated mock type for the ReminderStockHistory type
type ReminderStockHistory struct {
	mock.Mock
}

// CountUnread provides a mock function with given fields: ctx
func (_m *ReminderStockHistory) CountUnread(ctx context.Context) (dto.ReminderStockHistoryCountUnreadResponse, error) {
	ret := _m.Called(ctx)

	var r0 dto.ReminderStockHistoryCountUnreadResponse
	if rf, ok := ret.Get(0).(func(context.Context) dto.ReminderStockHistoryCountUnreadResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dto.ReminderStockHistoryCountUnreadResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, payload
func (_m *ReminderStockHistory) Delete(ctx context.Context, payload dto.ByIDRequest) (dto.ReminderStockHistoryResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.ReminderStockHistoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.ByIDRequest) dto.ReminderStockHistoryResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.ReminderStockHistoryResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ByIDRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, filterParam
func (_m *ReminderStockHistory) Find(ctx context.Context, filterParam abstraction.Filter) ([]dto.ReminderStockHistoryResponse, abstraction.PaginationInfo, error) {
	ret := _m.Called(ctx, filterParam)

	var r0 []dto.ReminderStockHistoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, abstraction.Filter) []dto.ReminderStockHistoryResponse); ok {
		r0 = rf(ctx, filterParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ReminderStockHistoryResponse)
		}
	}

	var r1 abstraction.PaginationInfo
	if rf, ok := ret.Get(1).(func(context.Context, abstraction.Filter) abstraction.PaginationInfo); ok {
		r1 = rf(ctx, filterParam)
	} else {
		r1 = ret.Get(1).(abstraction.PaginationInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, abstraction.Filter) error); ok {
		r2 = rf(ctx, filterParam)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ctx, payload
func (_m *ReminderStockHistory) FindByID(ctx context.Context, payload dto.ByIDRequest) (dto.ReminderStockHistoryResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.ReminderStockHistoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.ByIDRequest) dto.ReminderStockHistoryResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.ReminderStockHistoryResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ByIDRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRecurring provides a mock function with given fields: ctx, reminderType
func (_m *ReminderStockHistory) GenerateRecurring(ctx context.Context, reminderType string) error {
	ret := _m.Called(ctx, reminderType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, reminderType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, payload
func (_m *ReminderStockHistory) Update(ctx context.Context, payload dto.UpdateReminderStockHistoryRequest) (dto.ReminderStockHistoryResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.ReminderStockHistoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateReminderStockHistoryRequest) dto.ReminderStockHistoryResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.ReminderStockHistoryResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateReminderStockHistoryRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBulkRead provides a mock function with given fields: ctx, payload
func (_m *ReminderStockHistory) UpdateBulkRead(ctx context.Context, payload dto.UpdateReminderStockHistoryBulkReadRequest) (dto.ReminderStockHistoryBulkReadResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.ReminderStockHistoryBulkReadResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateReminderStockHistoryBulkReadRequest) dto.ReminderStockHistoryBulkReadResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.ReminderStockHistoryBulkReadResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateReminderStockHistoryBulkReadRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReminderStockHistory interface {
	mock.TestingT
	Cleanup(func())
}

// NewReminderStockHistory creates a new instance of ReminderStockHistory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReminderStockHistory(t mockConstructorTestingTNewReminderStockHistory) *ReminderStockHistory {
	mock := &ReminderStockHistory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
