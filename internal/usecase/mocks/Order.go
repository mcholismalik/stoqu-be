// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	abstraction "gitlab.com/stoqu/stoqu-be/internal/model/abstraction"

	dto "gitlab.com/stoqu/stoqu-be/internal/model/dto"

	mock "github.com/stretchr/testify/mock"
)

// Order is an autogenerated mock type for the Order type
type Order struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, filterParam
func (_m *Order) Find(ctx context.Context, filterParam abstraction.Filter) ([]dto.OrderViewResponse, abstraction.PaginationInfo, error) {
	ret := _m.Called(ctx, filterParam)

	var r0 []dto.OrderViewResponse
	if rf, ok := ret.Get(0).(func(context.Context, abstraction.Filter) []dto.OrderViewResponse); ok {
		r0 = rf(ctx, filterParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.OrderViewResponse)
		}
	}

	var r1 abstraction.PaginationInfo
	if rf, ok := ret.Get(1).(func(context.Context, abstraction.Filter) abstraction.PaginationInfo); ok {
		r1 = rf(ctx, filterParam)
	} else {
		r1 = ret.Get(1).(abstraction.PaginationInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, abstraction.Filter) error); ok {
		r2 = rf(ctx, filterParam)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ctx, payload
func (_m *Order) FindByID(ctx context.Context, payload dto.ByIDRequest) (dto.OrderViewResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.OrderViewResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.ByIDRequest) dto.OrderViewResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.OrderViewResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ByIDRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDetailByID provides a mock function with given fields: ctx, payload
func (_m *Order) FindDetailByID(ctx context.Context, payload dto.ByIDRequest) (dto.OrderViewDetailResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.OrderViewDetailResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.ByIDRequest) dto.OrderViewDetailResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.OrderViewDetailResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ByIDRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ctx, payload
func (_m *Order) Upsert(ctx context.Context, payload dto.UpsertOrderRequest) (dto.OrderUpsertResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.OrderUpsertResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpsertOrderRequest) dto.OrderUpsertResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.OrderUpsertResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UpsertOrderRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrder creates a new instance of Order. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrder(t mockConstructorTestingTNewOrder) *Order {
	mock := &Order{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
