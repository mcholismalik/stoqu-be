// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dto "gitlab.com/stoqu/stoqu-be/internal/model/dto"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, payload
func (_m *Auth) Login(ctx context.Context, payload dto.LoginAuthRequest) (dto.AuthLoginResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.AuthLoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginAuthRequest) dto.AuthLoginResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.AuthLoginResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.LoginAuthRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, payload
func (_m *Auth) Register(ctx context.Context, payload dto.RegisterAuthRequest) (dto.AuthRegisterResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.AuthRegisterResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterAuthRequest) dto.AuthRegisterResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.AuthRegisterResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.RegisterAuthRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuth interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuth creates a new instance of Auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuth(t mockConstructorTestingTNewAuth) *Auth {
	mock := &Auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
