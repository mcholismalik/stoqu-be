// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	abstraction "gitlab.com/stoqu/stoqu-be/internal/model/abstraction"

	dto "gitlab.com/stoqu/stoqu-be/internal/model/dto"

	mock "github.com/stretchr/testify/mock"
)

// Currency is an autogenerated mock type for the Currency type
type Currency struct {
	mock.Mock
}

// Convert provides a mock function with given fields: ctx, payload
func (_m *Currency) Convert(ctx context.Context, payload dto.ConvertCurrencyRequest) (dto.ConvertCurrencyResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.ConvertCurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.ConvertCurrencyRequest) dto.ConvertCurrencyResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.ConvertCurrencyResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ConvertCurrencyRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, payload
func (_m *Currency) Create(ctx context.Context, payload dto.CreateCurrencyRequest) (dto.CurrencyResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.CurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateCurrencyRequest) dto.CurrencyResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.CurrencyResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateCurrencyRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, payload
func (_m *Currency) Delete(ctx context.Context, payload dto.ByIDRequest) (dto.CurrencyResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.CurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.ByIDRequest) dto.CurrencyResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.CurrencyResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ByIDRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, filterParam
func (_m *Currency) Find(ctx context.Context, filterParam abstraction.Filter) ([]dto.CurrencyResponse, abstraction.PaginationInfo, error) {
	ret := _m.Called(ctx, filterParam)

	var r0 []dto.CurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, abstraction.Filter) []dto.CurrencyResponse); ok {
		r0 = rf(ctx, filterParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CurrencyResponse)
		}
	}

	var r1 abstraction.PaginationInfo
	if rf, ok := ret.Get(1).(func(context.Context, abstraction.Filter) abstraction.PaginationInfo); ok {
		r1 = rf(ctx, filterParam)
	} else {
		r1 = ret.Get(1).(abstraction.PaginationInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, abstraction.Filter) error); ok {
		r2 = rf(ctx, filterParam)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ctx, payload
func (_m *Currency) FindByID(ctx context.Context, payload dto.ByIDRequest) (dto.CurrencyResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.CurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.ByIDRequest) dto.CurrencyResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.CurrencyResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ByIDRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, payload
func (_m *Currency) Update(ctx context.Context, payload dto.UpdateCurrencyRequest) (dto.CurrencyResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.CurrencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateCurrencyRequest) dto.CurrencyResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.CurrencyResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateCurrencyRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCurrency interface {
	mock.TestingT
	Cleanup(func())
}

// NewCurrency creates a new instance of Currency. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCurrency(t mockConstructorTestingTNewCurrency) *Currency {
	mock := &Currency{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
