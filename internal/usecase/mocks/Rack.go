// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	abstraction "gitlab.com/stoqu/stoqu-be/internal/model/abstraction"

	dto "gitlab.com/stoqu/stoqu-be/internal/model/dto"

	mock "github.com/stretchr/testify/mock"
)

// Rack is an autogenerated mock type for the Rack type
type Rack struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, payload
func (_m *Rack) Create(ctx context.Context, payload dto.CreateRackRequest) (dto.RackResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.RackResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateRackRequest) dto.RackResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.RackResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateRackRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, payload
func (_m *Rack) Delete(ctx context.Context, payload dto.ByIDRequest) (dto.RackResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.RackResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.ByIDRequest) dto.RackResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.RackResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ByIDRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, filterParam
func (_m *Rack) Find(ctx context.Context, filterParam abstraction.Filter) ([]dto.RackResponse, abstraction.PaginationInfo, error) {
	ret := _m.Called(ctx, filterParam)

	var r0 []dto.RackResponse
	if rf, ok := ret.Get(0).(func(context.Context, abstraction.Filter) []dto.RackResponse); ok {
		r0 = rf(ctx, filterParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.RackResponse)
		}
	}

	var r1 abstraction.PaginationInfo
	if rf, ok := ret.Get(1).(func(context.Context, abstraction.Filter) abstraction.PaginationInfo); ok {
		r1 = rf(ctx, filterParam)
	} else {
		r1 = ret.Get(1).(abstraction.PaginationInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, abstraction.Filter) error); ok {
		r2 = rf(ctx, filterParam)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ctx, payload
func (_m *Rack) FindByID(ctx context.Context, payload dto.ByIDRequest) (dto.RackResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.RackResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.ByIDRequest) dto.RackResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.RackResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ByIDRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, payload
func (_m *Rack) Update(ctx context.Context, payload dto.UpdateRackRequest) (dto.RackResponse, error) {
	ret := _m.Called(ctx, payload)

	var r0 dto.RackResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateRackRequest) dto.RackResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(dto.RackResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateRackRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRack interface {
	mock.TestingT
	Cleanup(func())
}

// NewRack creates a new instance of Rack. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRack(t mockConstructorTestingTNewRack) *Rack {
	mock := &Rack{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
