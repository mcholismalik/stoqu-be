// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	abstraction "gitlab.com/stoqu/stoqu-be/internal/model/abstraction"

	dto "gitlab.com/stoqu/stoqu-be/internal/model/dto"

	mock "github.com/stretchr/testify/mock"

	os "os"
)

// Report is an autogenerated mock type for the Report type
type Report struct {
	mock.Mock
}

// FindOrder provides a mock function with given fields: ctx, filterParam
func (_m *Report) FindOrder(ctx context.Context, filterParam abstraction.Filter) (dto.OrderReportResponse, abstraction.PaginationInfo, error) {
	ret := _m.Called(ctx, filterParam)

	var r0 dto.OrderReportResponse
	if rf, ok := ret.Get(0).(func(context.Context, abstraction.Filter) dto.OrderReportResponse); ok {
		r0 = rf(ctx, filterParam)
	} else {
		r0 = ret.Get(0).(dto.OrderReportResponse)
	}

	var r1 abstraction.PaginationInfo
	if rf, ok := ret.Get(1).(func(context.Context, abstraction.Filter) abstraction.PaginationInfo); ok {
		r1 = rf(ctx, filterParam)
	} else {
		r1 = ret.Get(1).(abstraction.PaginationInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, abstraction.Filter) error); ok {
		r2 = rf(ctx, filterParam)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindOrderExcel provides a mock function with given fields: ctx, filterParam
func (_m *Report) FindOrderExcel(ctx context.Context, filterParam abstraction.Filter) (*os.File, error) {
	ret := _m.Called(ctx, filterParam)

	var r0 *os.File
	if rf, ok := ret.Get(0).(func(context.Context, abstraction.Filter) *os.File); ok {
		r0 = rf(ctx, filterParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, abstraction.Filter) error); ok {
		r1 = rf(ctx, filterParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrderProduct provides a mock function with given fields: ctx, filterParam, query
func (_m *Report) FindOrderProduct(ctx context.Context, filterParam abstraction.Filter, query dto.ProductReportQuery) (dto.OrderProductReportResponse, abstraction.PaginationInfo, error) {
	ret := _m.Called(ctx, filterParam, query)

	var r0 dto.OrderProductReportResponse
	if rf, ok := ret.Get(0).(func(context.Context, abstraction.Filter, dto.ProductReportQuery) dto.OrderProductReportResponse); ok {
		r0 = rf(ctx, filterParam, query)
	} else {
		r0 = ret.Get(0).(dto.OrderProductReportResponse)
	}

	var r1 abstraction.PaginationInfo
	if rf, ok := ret.Get(1).(func(context.Context, abstraction.Filter, dto.ProductReportQuery) abstraction.PaginationInfo); ok {
		r1 = rf(ctx, filterParam, query)
	} else {
		r1 = ret.Get(1).(abstraction.PaginationInfo)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, abstraction.Filter, dto.ProductReportQuery) error); ok {
		r2 = rf(ctx, filterParam, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindOrderProductExcel provides a mock function with given fields: ctx, filterParam, query
func (_m *Report) FindOrderProductExcel(ctx context.Context, filterParam abstraction.Filter, query dto.ProductReportQuery) (*os.File, error) {
	ret := _m.Called(ctx, filterParam, query)

	var r0 *os.File
	if rf, ok := ret.Get(0).(func(context.Context, abstraction.Filter, dto.ProductReportQuery) *os.File); ok {
		r0 = rf(ctx, filterParam, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, abstraction.Filter, dto.ProductReportQuery) error); ok {
		r1 = rf(ctx, filterParam, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReport interface {
	mock.TestingT
	Cleanup(func())
}

// NewReport creates a new instance of Report. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReport(t mockConstructorTestingTNewReport) *Report {
	mock := &Report{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
